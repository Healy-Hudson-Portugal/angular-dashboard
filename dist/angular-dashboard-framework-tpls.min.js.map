{"version":3,"sources":["adf.js","adf.locale.js","column.js","dashboard.js","locale-constant.js","order-by-object-key.js","provider.js","angular-dashboard-framework-tpls.min.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js","angular-dashboard-framework.tpl.js","angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","customDashboardTemplatePath","link","col","isDefined","isArray","cloned","append","$timeout","$mdDialog","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","name","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","transclude","collapsible","editable","maximizable","adfWidgetFilter","controller","getNewModalScope","$new","translate","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","timestamp","Date","now","toggleEditMode","modelCopy","$on","collapseAll","collapseExpandStatus","cancelEditMode","editDashboardDialog","editDashboardScope","adfEditTemplatePath","editTemplateUrl","show","backdrop","info","closeDialog","$destroy","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","opts","addWidget","$attr","enableConfirmDelete","constant","defaultLocale","frameworkLocales","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","sv-SE","filter","$filter","array","objectKey","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","label","translation","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","this","extend","reload","frameless","apply","path","template","templatePath","setLocale","locale","Error","addLocale","translations","isString","isObject","$get","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","renderError","msg","html","compileWidget","currentScope","content","newScope","renderWidget","templateScope","base","resolvers","$tpl","getTemplate","resolve","promise","get","invoke","all","then","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","indexOf","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","preLink","definition","styleClass","fromJson","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","err","event","args","widgetClasses","classes","openFullScreen","fullScreenScope","modalSize","windowClass","compile","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '<<adfVersion>>');","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf.locale', [])\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, dashboard, adfTemplatePath, $mdDialog) {\r\n\r\n      'use strict';\r\n\r\n      function stringToBoolean(string) {\r\n          switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n              case 'true': case 'yes': case '1': return true;\r\n              case 'false': case 'no': case '0': case null: return false;\r\n              default: return Boolean(string);\r\n          }\r\n      }\r\n\r\n      function copyWidgets(source, target) {\r\n          if (source.widgets && source.widgets.length > 0) {\r\n              var w = source.widgets.shift();\r\n              while (w) {\r\n                  target.widgets.push(w);\r\n                  w = source.widgets.shift();\r\n              }\r\n          }\r\n      }\r\n\r\n      /**\r\n      * Copy widget from old columns to the new model\r\n      * @param object root the model\r\n      * @param array of columns\r\n      * @param counter\r\n      */\r\n      function fillStructure(root, columns, counter) {\r\n          counter = counter || 0;\r\n\r\n          if (angular.isDefined(root.rows)) {\r\n              angular.forEach(root.rows, function (row) {\r\n                  angular.forEach(row.columns, function (column) {\r\n                      // if the widgets prop doesn't exist, create a new array for it.\r\n                      // this allows ui.sortable to do it's thing without error\r\n                      if (!column.widgets) {\r\n                          column.widgets = [];\r\n                      }\r\n\r\n                      // if a column exist at the counter index, copy over the column\r\n                      if (angular.isDefined(columns[counter])) {\r\n                          // do not add widgets to a column, which uses nested rows\r\n                          if (angular.isUndefined(column.rows)) {\r\n                              copyWidgets(columns[counter], column);\r\n                              counter++;\r\n                          }\r\n                      }\r\n\r\n                      // run fillStructure again for any sub rows/columns\r\n                      counter = fillStructure(column, columns, counter);\r\n                  });\r\n              });\r\n          }\r\n          return counter;\r\n      }\r\n\r\n      /**\r\n      * Read Columns: recursively searches an object for the 'columns' property\r\n      * @param object model\r\n      * @param array  an array of existing columns; used when recursion happens\r\n      */\r\n      function readColumns(root, columns) {\r\n          columns = columns || [];\r\n\r\n          if (angular.isDefined(root.rows)) {\r\n              angular.forEach(root.rows, function (row) {\r\n                  angular.forEach(row.columns, function (col) {\r\n                      columns.push(col);\r\n                      // keep reading columns until we can't any more\r\n                      readColumns(col, columns);\r\n                  });\r\n              });\r\n          }\r\n\r\n          return columns;\r\n      }\r\n\r\n      function changeStructure(model, structure) {\r\n          var columns = readColumns(model);\r\n          var counter = 0;\r\n\r\n          model.rows = angular.copy(structure.rows);\r\n\r\n          while (counter < columns.length) {\r\n              counter = fillStructure(model, columns, counter);\r\n          }\r\n      }\r\n\r\n      function createConfiguration(type) {\r\n          var cfg = {};\r\n          var config = dashboard.widgets[type].config;\r\n          if (config) {\r\n              cfg = angular.copy(config);\r\n          }\r\n          return cfg;\r\n      }\r\n\r\n      /**\r\n       * Find first widget column in model.\r\n       *\r\n       * @param dashboard model\r\n       */\r\n      function findFirstWidgetColumn(model) {\r\n          var column = null;\r\n          if (!angular.isArray(model.rows)) {\r\n              $log.error('model does not have any rows');\r\n              return null;\r\n          }\r\n          for (var i = 0; i < model.rows.length; i++) {\r\n              var row = model.rows[i];\r\n              if (angular.isArray(row.columns)) {\r\n                  for (var j = 0; j < row.columns.length; j++) {\r\n                      var col = row.columns[j];\r\n                      if (!col.rows) {\r\n                          column = col;\r\n                          break;\r\n                      }\r\n                  }\r\n              }\r\n              if (column) {\r\n                  break;\r\n              }\r\n          }\r\n          return column;\r\n      }\r\n\r\n      /**\r\n       * Adds the widget to first column of the model.\r\n       *\r\n       * @param dashboard model\r\n       * @param widget to add to model\r\n       * @param name name of the dashboard\r\n       */\r\n      function addNewWidgetToModel(model, widget, name) {\r\n          if (model) {\r\n              var column = findFirstWidgetColumn(model);\r\n              if (column) {\r\n                  if (!column.widgets) {\r\n                      column.widgets = [];\r\n                  }\r\n                  column.widgets.unshift(widget);\r\n\r\n                  // broadcast added event\r\n                  $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n              } else {\r\n                  $log.error('could not find first widget column');\r\n              }\r\n          } else {\r\n              $log.error('model is undefined');\r\n          }\r\n      }\r\n\r\n      /**\r\n       * Checks if the edit mode of the widget should be opened immediately.\r\n       *\r\n       * @param widget type\r\n       */\r\n      function isEditModeImmediate(type) {\r\n          var widget = dashboard.widgets[type];\r\n          return widget && widget.edit && widget.edit.immediate;\r\n      }\r\n\r\n      /**\r\n       * Opens the edit mode of the specified widget.\r\n       *\r\n       * @param dashboard scope\r\n       * @param widget\r\n       */\r\n      function openEditMode($scope, widget) {\r\n          // wait some time before fire enter edit mode event\r\n          $timeout(function () {\r\n              $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n          }, 200);\r\n      }\r\n\r\n      /**\r\n       * Splits an object into an array multiple objects inside.\r\n       *\r\n       * @param object source object\r\n       * @param size size of array\r\n       *\r\n       * @return array of splitted objects\r\n       */\r\n      function split(object, size) {\r\n          var arr = [];\r\n          var i = 0;\r\n          angular.forEach(object, function (value, key) {\r\n              var index = i++ % size;\r\n              if (!arr[index]) {\r\n                  arr[index] = {};\r\n              }\r\n              arr[index][key] = value;\r\n          });\r\n          return arr;\r\n      }\r\n\r\n      /**\r\n       * Creates object with the category name as key and an array of widgets as value.\r\n       *\r\n       * @param widgets array of widgets\r\n       *\r\n       * @return array of categories\r\n       */\r\n      function createCategories(widgets) {\r\n          var categories = {};\r\n          angular.forEach(widgets, function (widget, key) {\r\n              var category = widget.category;\r\n              // if the widget has no category use a default one\r\n              if (!category) {\r\n                  category = 'Miscellaneous';\r\n              }\r\n              // push widget to category array\r\n              if (angular.isUndefined(categories[category])) {\r\n                  categories[category] = { widgets: {} };\r\n              }\r\n              categories[category].widgets[key] = widget;\r\n          });\r\n          return categories;\r\n      }\r\n\r\n      return {\r\n          replace: true,\r\n          restrict: 'EA',\r\n          transclude: false,\r\n          scope: {\r\n              structure: '@',\r\n              name: '@',\r\n              collapsible: '@',\r\n              editable: '@',\r\n              editMode: '@',\r\n              continuousEditMode: '=',\r\n              maximizable: '@',\r\n              adfModel: '=',\r\n              adfWidgetFilter: '=',\r\n              categories: '@'\r\n              \r\n          },\r\n          controller: function ($scope) {\r\n              var model = {};\r\n              var structure = {};\r\n              var widgetFilter = null;\r\n              var structureName = {};\r\n              var name = $scope.name;\r\n\r\n              // Watching for changes on adfModel\r\n              $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                  // has model changed or is the model attribute not set\r\n                  if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                      model = $scope.adfModel;\r\n                      widgetFilter = $scope.adfWidgetFilter;\r\n                      if (!model || !model.rows) {\r\n                          structureName = $scope.structure;\r\n                          structure = dashboard.structures[structureName];\r\n                          if (structure) {\r\n                              if (model) {\r\n                                  model.rows = angular.copy(structure).rows;\r\n                              } else {\r\n                                  model = angular.copy(structure);\r\n                              }\r\n                              model.structure = structureName;\r\n                          } else {\r\n                              $log.error('could not find structure ' + structureName);\r\n                          }\r\n                      }\r\n\r\n                      if (model) {\r\n                          if (!model.title) {\r\n                              model.title = 'Dashboard';\r\n                          }\r\n                          if (!model.titleTemplateUrl) {\r\n                              model.titleTemplateUrl = (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-title.html';\r\n                          }\r\n                          $scope.model = model;\r\n                      } else {\r\n                          $log.error('could not find or create model');\r\n                      }\r\n                  }\r\n              }, true);\r\n\r\n              // edit mode\r\n              $scope.editMode = false;\r\n              $scope.editClass = '';\r\n\r\n              // edit available\r\n              $scope.editable = false;\r\n\r\n              // use to build an unique id for each dashboard\r\n              $scope.timestamp = Date.now();\r\n\r\n              //passs translate function from dashboard so we can translate labels inside html templates\r\n              $scope.translate = dashboard.translate;\r\n\r\n              function getNewModalScope() {\r\n                  var scope = $scope.$new();\r\n                  //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                  scope.translate = dashboard.translate;\r\n                  return scope;\r\n              }\r\n\r\n              $scope.toggleEditMode = function () {\r\n                  $scope.editMode = !$scope.editMode;\r\n                  if ($scope.editMode) {\r\n                      if (!$scope.continuousEditMode) {\r\n                          $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                          $rootScope.$broadcast('adfIsEditMode');\r\n                      }\r\n                  }\r\n\r\n                  if (!$scope.editMode) {\r\n                      $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                  }\r\n              };\r\n\r\n              $scope.$on('adfToggleEditMode', function () {\r\n                  $scope.toggleEditMode();\r\n              });\r\n\r\n              $scope.collapseAll = function (collapseExpandStatus) {\r\n                  $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\r\n              };\r\n\r\n              $scope.cancelEditMode = function () {\r\n                  $scope.editMode = false;\r\n                  if (!$scope.continuousEditMode) {\r\n                      $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                  }\r\n                  $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n              };\r\n\r\n              // edit dashboard settings\r\n              $scope.editDashboardDialog = function () {\r\n                  var editDashboardScope = getNewModalScope();\r\n                  // create a copy of the title, to avoid changing the title to\r\n                  // \"dashboard\" if the field is empty\r\n                  editDashboardScope.copy = {\r\n                      title: model.title\r\n                  };\r\n\r\n                  // pass dashboard structure to scope\r\n                  editDashboardScope.structures = dashboard.structures;\r\n\r\n                  // pass split function to scope, to be able to display structures in multiple columns\r\n                  editDashboardScope.split = split;\r\n\r\n                  var adfEditTemplatePath = (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-edit.html';\r\n                  if (model.editTemplateUrl) {\r\n                      adfEditTemplatePath = model.editTemplateUrl;\r\n                  }\r\n                  var instance = $mdDialog.show({\r\n                    scope: editDashboardScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                  });\r\n                  editDashboardScope.changeStructure = function (name, structure) {\r\n                      $log.info('change structure to ' + name);\r\n                      changeStructure(model, structure);\r\n                      if (model.structure !== name) {\r\n                          model.structure = name;\r\n                      }\r\n                  };\r\n                  editDashboardScope.closeDialog = function () {\r\n                      // copy the new title back to the model\r\n                      model.title = editDashboardScope.copy.title;\r\n                      // close modal and destroy the scope\r\n                      editDashboardScope.$destroy();\r\n                  };\r\n              };\r\n\r\n              // add widget dialog\r\n              $scope.addWidgetDialog = function () {\r\n                  var addScope = getNewModalScope();\r\n                  var model = $scope.model;\r\n                  var widgets;\r\n                  if (angular.isFunction(widgetFilter)) {\r\n                      widgets = {};\r\n                      angular.forEach(dashboard.widgets, function (widget, type) {\r\n                          if (widgetFilter(widget, type, model)) {\r\n                              widgets[type] = widget;\r\n                          }\r\n                      });\r\n                  } else {\r\n                      widgets = dashboard.widgets;\r\n                  }\r\n                  addScope.widgets = widgets;\r\n\r\n                  //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                  addScope.translate = $scope.translate;\r\n\r\n                  // pass createCategories function to scope, if categories option is enabled\r\n                  if ($scope.options.categories) {\r\n                      $scope.createCategories = createCategories;\r\n                  }\r\n\r\n                  var adfAddTemplatePath = (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'widget-add.html';\r\n                  if (model.addTemplateUrl) {\r\n                      adfAddTemplatePath = model.addTemplateUrl;\r\n                  }\r\n\r\n                  var opts = {\r\n                      scope: addScope,\r\n                      templateUrl: adfAddTemplatePath,\r\n                      backdrop: 'static'\r\n                  };\r\n\r\n                  $mdDialog.show(opts);\r\n                   \r\n                  addScope.addWidget = function (widget) {\r\n                      var w = {\r\n                          type: widget,\r\n                          config: createConfiguration(widget)\r\n                      };\r\n                      addNewWidgetToModel(model, w, name);\r\n                      // close and destroy\r\n                      addScope.$destroy();\r\n\r\n                      // check for open edit mode immediately\r\n                      if (isEditModeImmediate(widget)) {\r\n                          openEditMode($scope, w);\r\n                      }\r\n                  };\r\n                  addScope.closeDialog = function () {\r\n                      // close and destroy\r\n                      addScope.$destroy();\r\n                  };\r\n              };\r\n\r\n              $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n          },\r\n          link: function ($scope, $element, $attr) {\r\n              // pass options to scope\r\n              var options = {\r\n                  name: $attr.name,\r\n                  editable: stringToBoolean($attr.editable),\r\n                  enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                  maximizable: stringToBoolean($attr.maximizable),\r\n                  collapsible: stringToBoolean($attr.collapsible),\r\n                  categories: stringToBoolean($attr.categories)\r\n              };\r\n              if (angular.isDefined($attr.editable)) {\r\n                  options.editable = stringToBoolean($attr.editable);\r\n              }\r\n              $scope.options = options;\r\n          },\r\n          templateUrl:(!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard.html'\r\n      };\r\n  });","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n'use strict';\r\n\r\n/**\r\n* @ngdoc object\r\n* @name adf.locale#adfLocale\r\n* @description\r\n*\r\n* Holds settings and values for framework supported locales\r\n*/\r\nangular.module('adf.locale')\r\n.constant('adfLocale',\r\n  {\r\n    defaultLocale: 'en-GB',\r\n    frameworkLocales: {\r\n      'en-GB': {\r\n        ADF_COMMON_CLOSE: 'Close',\r\n        ADF_COMMON_DELETE: 'Delete',\r\n        ADF_COMMON_TITLE: 'Title',\r\n        ADF_COMMON_CANCEL: 'Cancel',\r\n        ADF_COMMON_APPLY: 'Apply',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\r\n      },\r\n      'sv-SE': {\r\n        ADF_COMMON_CLOSE: 'Stäng',\r\n        ADF_COMMON_DELETE: 'Ta bort',\r\n        ADF_COMMON_TITLE: 'Titel',\r\n        ADF_COMMON_CANCEL: 'Avbryt',\r\n        ADF_COMMON_APPLY: 'Använd',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\r\n      }\r\n    }\r\n  }\r\n);\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n  .provider('dashboard', function(adfLocale){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n    var customWidgetTemplatePath = null;\r\n    var customDashboardTemplatePath = null;\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n    var activeLocale = adfLocale.defaultLocale;\r\n    var locales = adfLocale.frameworkLocales;\r\n\r\n    function getLocales() {\r\n      return locales;\r\n    }\r\n\r\n    function getActiveLocale() {\r\n      return activeLocale;\r\n    }\r\n\r\n    function translate(label) {\r\n      var translation = locales[activeLocale][label];\r\n      return translation ? translation : label;\r\n    }\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `category` - `{string=}` - Category of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *      on the scope of the widget.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *        on the scope of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n    this.customDashboardTemplatePath = function (path) {\r\n        customDashboardTemplatePath = path;\r\n        return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#customWidgetTemplatePath\r\n     * @propertyOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the container template for the widgets\r\n     *\r\n     * @param {string} path to the custom widget template\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.customWidgetTemplatePath = function(templatePath) {\r\n      customWidgetTemplatePath = templatePath;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#setLocale\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the locale setting of adf\r\n     *\r\n     * @param {string} ISO Language Code\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n     this.setLocale = function(locale){\r\n       if(locales[locale]) {\r\n         activeLocale = locale;\r\n       } else {\r\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n       }\r\n       return this;\r\n     };\r\n\r\n     /**\r\n      * @ngdoc method\r\n      * @name adf.dashboardProvider#addLocale\r\n      * @methodOf adf.dashboardProvider\r\n      * @description\r\n      *\r\n      * Adds a new locale to adf\r\n      *\r\n      * @param {string} ISO Language Code for the new locale\r\n      * @param {object} translations for the locale.\r\n      *\r\n      * @returns {Object} self\r\n      */\r\n      this.addLocale = function(locale, translations){\r\n        if(!angular.isString(locale)) {\r\n          throw new Error('locale must be an string');\r\n        }\r\n\r\n        if(!angular.isObject(translations)) {\r\n          throw new Error('translations must be an object');\r\n        }\r\n\r\n        locales[locale] = translations;\r\n        return this;\r\n      };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    * @property {method} sets locale of adf.\r\n    * @property {Array.<Object>} hold all of the locale translations.\r\n    * @property {string} the active locale setting.\r\n    * @property {method} translation function passed to templates.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n        setLocale: this.setLocale,\r\n        locales: getLocales,\r\n        activeLocale: getActiveLocale,\r\n        translate: translate,\r\n        customWidgetTemplatePath: customWidgetTemplatePath,\r\n        customDashboardTemplatePath: customDashboardTemplatePath,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '0.13.0-SNAPSHOT');\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf.locale', [])\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"dashboard\", \"adfTemplatePath\", \"$mdDialog\", function ($rootScope, $log, $timeout, dashboard, adfTemplatePath, $mdDialog) {\r\n\r\n      \r\n\r\n      function stringToBoolean(string) {\r\n          switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n              case 'true': case 'yes': case '1': return true;\r\n              case 'false': case 'no': case '0': case null: return false;\r\n              default: return Boolean(string);\r\n          }\r\n      }\r\n\r\n      function copyWidgets(source, target) {\r\n          if (source.widgets && source.widgets.length > 0) {\r\n              var w = source.widgets.shift();\r\n              while (w) {\r\n                  target.widgets.push(w);\r\n                  w = source.widgets.shift();\r\n              }\r\n          }\r\n      }\r\n\r\n      /**\r\n      * Copy widget from old columns to the new model\r\n      * @param object root the model\r\n      * @param array of columns\r\n      * @param counter\r\n      */\r\n      function fillStructure(root, columns, counter) {\r\n          counter = counter || 0;\r\n\r\n          if (angular.isDefined(root.rows)) {\r\n              angular.forEach(root.rows, function (row) {\r\n                  angular.forEach(row.columns, function (column) {\r\n                      // if the widgets prop doesn't exist, create a new array for it.\r\n                      // this allows ui.sortable to do it's thing without error\r\n                      if (!column.widgets) {\r\n                          column.widgets = [];\r\n                      }\r\n\r\n                      // if a column exist at the counter index, copy over the column\r\n                      if (angular.isDefined(columns[counter])) {\r\n                          // do not add widgets to a column, which uses nested rows\r\n                          if (angular.isUndefined(column.rows)) {\r\n                              copyWidgets(columns[counter], column);\r\n                              counter++;\r\n                          }\r\n                      }\r\n\r\n                      // run fillStructure again for any sub rows/columns\r\n                      counter = fillStructure(column, columns, counter);\r\n                  });\r\n              });\r\n          }\r\n          return counter;\r\n      }\r\n\r\n      /**\r\n      * Read Columns: recursively searches an object for the 'columns' property\r\n      * @param object model\r\n      * @param array  an array of existing columns; used when recursion happens\r\n      */\r\n      function readColumns(root, columns) {\r\n          columns = columns || [];\r\n\r\n          if (angular.isDefined(root.rows)) {\r\n              angular.forEach(root.rows, function (row) {\r\n                  angular.forEach(row.columns, function (col) {\r\n                      columns.push(col);\r\n                      // keep reading columns until we can't any more\r\n                      readColumns(col, columns);\r\n                  });\r\n              });\r\n          }\r\n\r\n          return columns;\r\n      }\r\n\r\n      function changeStructure(model, structure) {\r\n          var columns = readColumns(model);\r\n          var counter = 0;\r\n\r\n          model.rows = angular.copy(structure.rows);\r\n\r\n          while (counter < columns.length) {\r\n              counter = fillStructure(model, columns, counter);\r\n          }\r\n      }\r\n\r\n      function createConfiguration(type) {\r\n          var cfg = {};\r\n          var config = dashboard.widgets[type].config;\r\n          if (config) {\r\n              cfg = angular.copy(config);\r\n          }\r\n          return cfg;\r\n      }\r\n\r\n      /**\r\n       * Find first widget column in model.\r\n       *\r\n       * @param dashboard model\r\n       */\r\n      function findFirstWidgetColumn(model) {\r\n          var column = null;\r\n          if (!angular.isArray(model.rows)) {\r\n              $log.error('model does not have any rows');\r\n              return null;\r\n          }\r\n          for (var i = 0; i < model.rows.length; i++) {\r\n              var row = model.rows[i];\r\n              if (angular.isArray(row.columns)) {\r\n                  for (var j = 0; j < row.columns.length; j++) {\r\n                      var col = row.columns[j];\r\n                      if (!col.rows) {\r\n                          column = col;\r\n                          break;\r\n                      }\r\n                  }\r\n              }\r\n              if (column) {\r\n                  break;\r\n              }\r\n          }\r\n          return column;\r\n      }\r\n\r\n      /**\r\n       * Adds the widget to first column of the model.\r\n       *\r\n       * @param dashboard model\r\n       * @param widget to add to model\r\n       * @param name name of the dashboard\r\n       */\r\n      function addNewWidgetToModel(model, widget, name) {\r\n          if (model) {\r\n              var column = findFirstWidgetColumn(model);\r\n              if (column) {\r\n                  if (!column.widgets) {\r\n                      column.widgets = [];\r\n                  }\r\n                  column.widgets.unshift(widget);\r\n\r\n                  // broadcast added event\r\n                  $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n              } else {\r\n                  $log.error('could not find first widget column');\r\n              }\r\n          } else {\r\n              $log.error('model is undefined');\r\n          }\r\n      }\r\n\r\n      /**\r\n       * Checks if the edit mode of the widget should be opened immediately.\r\n       *\r\n       * @param widget type\r\n       */\r\n      function isEditModeImmediate(type) {\r\n          var widget = dashboard.widgets[type];\r\n          return widget && widget.edit && widget.edit.immediate;\r\n      }\r\n\r\n      /**\r\n       * Opens the edit mode of the specified widget.\r\n       *\r\n       * @param dashboard scope\r\n       * @param widget\r\n       */\r\n      function openEditMode($scope, widget) {\r\n          // wait some time before fire enter edit mode event\r\n          $timeout(function () {\r\n              $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n          }, 200);\r\n      }\r\n\r\n      /**\r\n       * Splits an object into an array multiple objects inside.\r\n       *\r\n       * @param object source object\r\n       * @param size size of array\r\n       *\r\n       * @return array of splitted objects\r\n       */\r\n      function split(object, size) {\r\n          var arr = [];\r\n          var i = 0;\r\n          angular.forEach(object, function (value, key) {\r\n              var index = i++ % size;\r\n              if (!arr[index]) {\r\n                  arr[index] = {};\r\n              }\r\n              arr[index][key] = value;\r\n          });\r\n          return arr;\r\n      }\r\n\r\n      /**\r\n       * Creates object with the category name as key and an array of widgets as value.\r\n       *\r\n       * @param widgets array of widgets\r\n       *\r\n       * @return array of categories\r\n       */\r\n      function createCategories(widgets) {\r\n          var categories = {};\r\n          angular.forEach(widgets, function (widget, key) {\r\n              var category = widget.category;\r\n              // if the widget has no category use a default one\r\n              if (!category) {\r\n                  category = 'Miscellaneous';\r\n              }\r\n              // push widget to category array\r\n              if (angular.isUndefined(categories[category])) {\r\n                  categories[category] = { widgets: {} };\r\n              }\r\n              categories[category].widgets[key] = widget;\r\n          });\r\n          return categories;\r\n      }\r\n\r\n      return {\r\n          replace: true,\r\n          restrict: 'EA',\r\n          transclude: false,\r\n          scope: {\r\n              structure: '@',\r\n              name: '@',\r\n              collapsible: '@',\r\n              editable: '@',\r\n              editMode: '@',\r\n              continuousEditMode: '=',\r\n              maximizable: '@',\r\n              adfModel: '=',\r\n              adfWidgetFilter: '=',\r\n              categories: '@'\r\n              \r\n          },\r\n          controller: [\"$scope\", function ($scope) {\r\n              var model = {};\r\n              var structure = {};\r\n              var widgetFilter = null;\r\n              var structureName = {};\r\n              var name = $scope.name;\r\n\r\n              // Watching for changes on adfModel\r\n              $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                  // has model changed or is the model attribute not set\r\n                  if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                      model = $scope.adfModel;\r\n                      widgetFilter = $scope.adfWidgetFilter;\r\n                      if (!model || !model.rows) {\r\n                          structureName = $scope.structure;\r\n                          structure = dashboard.structures[structureName];\r\n                          if (structure) {\r\n                              if (model) {\r\n                                  model.rows = angular.copy(structure).rows;\r\n                              } else {\r\n                                  model = angular.copy(structure);\r\n                              }\r\n                              model.structure = structureName;\r\n                          } else {\r\n                              $log.error('could not find structure ' + structureName);\r\n                          }\r\n                      }\r\n\r\n                      if (model) {\r\n                          if (!model.title) {\r\n                              model.title = 'Dashboard';\r\n                          }\r\n                          if (!model.titleTemplateUrl) {\r\n                              model.titleTemplateUrl = (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-title.html';\r\n                          }\r\n                          $scope.model = model;\r\n                      } else {\r\n                          $log.error('could not find or create model');\r\n                      }\r\n                  }\r\n              }, true);\r\n\r\n              // edit mode\r\n              $scope.editMode = false;\r\n              $scope.editClass = '';\r\n\r\n              // edit available\r\n              $scope.editable = false;\r\n\r\n              // use to build an unique id for each dashboard\r\n              $scope.timestamp = Date.now();\r\n\r\n              //passs translate function from dashboard so we can translate labels inside html templates\r\n              $scope.translate = dashboard.translate;\r\n\r\n              function getNewModalScope() {\r\n                  var scope = $scope.$new();\r\n                  //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                  scope.translate = dashboard.translate;\r\n                  return scope;\r\n              }\r\n\r\n              $scope.toggleEditMode = function () {\r\n                  $scope.editMode = !$scope.editMode;\r\n                  if ($scope.editMode) {\r\n                      if (!$scope.continuousEditMode) {\r\n                          $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                          $rootScope.$broadcast('adfIsEditMode');\r\n                      }\r\n                  }\r\n\r\n                  if (!$scope.editMode) {\r\n                      $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                  }\r\n              };\r\n\r\n              $scope.$on('adfToggleEditMode', function () {\r\n                  $scope.toggleEditMode();\r\n              });\r\n\r\n              $scope.collapseAll = function (collapseExpandStatus) {\r\n                  $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\r\n              };\r\n\r\n              $scope.cancelEditMode = function () {\r\n                  $scope.editMode = false;\r\n                  if (!$scope.continuousEditMode) {\r\n                      $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                  }\r\n                  $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n              };\r\n\r\n              // edit dashboard settings\r\n              $scope.editDashboardDialog = function () {\r\n                  var editDashboardScope = getNewModalScope();\r\n                  // create a copy of the title, to avoid changing the title to\r\n                  // \"dashboard\" if the field is empty\r\n                  editDashboardScope.copy = {\r\n                      title: model.title\r\n                  };\r\n\r\n                  // pass dashboard structure to scope\r\n                  editDashboardScope.structures = dashboard.structures;\r\n\r\n                  // pass split function to scope, to be able to display structures in multiple columns\r\n                  editDashboardScope.split = split;\r\n\r\n                  var adfEditTemplatePath = (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-edit.html';\r\n                  if (model.editTemplateUrl) {\r\n                      adfEditTemplatePath = model.editTemplateUrl;\r\n                  }\r\n                  var instance = $mdDialog.show({\r\n                    scope: editDashboardScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                  });\r\n                  editDashboardScope.changeStructure = function (name, structure) {\r\n                      $log.info('change structure to ' + name);\r\n                      changeStructure(model, structure);\r\n                      if (model.structure !== name) {\r\n                          model.structure = name;\r\n                      }\r\n                  };\r\n                  editDashboardScope.closeDialog = function () {\r\n                      // copy the new title back to the model\r\n                      model.title = editDashboardScope.copy.title;\r\n                      // close modal and destroy the scope\r\n                      editDashboardScope.$destroy();\r\n                  };\r\n              };\r\n\r\n              // add widget dialog\r\n              $scope.addWidgetDialog = function () {\r\n                  var addScope = getNewModalScope();\r\n                  var model = $scope.model;\r\n                  var widgets;\r\n                  if (angular.isFunction(widgetFilter)) {\r\n                      widgets = {};\r\n                      angular.forEach(dashboard.widgets, function (widget, type) {\r\n                          if (widgetFilter(widget, type, model)) {\r\n                              widgets[type] = widget;\r\n                          }\r\n                      });\r\n                  } else {\r\n                      widgets = dashboard.widgets;\r\n                  }\r\n                  addScope.widgets = widgets;\r\n\r\n                  //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                  addScope.translate = $scope.translate;\r\n\r\n                  // pass createCategories function to scope, if categories option is enabled\r\n                  if ($scope.options.categories) {\r\n                      $scope.createCategories = createCategories;\r\n                  }\r\n\r\n                  var adfAddTemplatePath = (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'widget-add.html';\r\n                  if (model.addTemplateUrl) {\r\n                      adfAddTemplatePath = model.addTemplateUrl;\r\n                  }\r\n\r\n                  var opts = {\r\n                      scope: addScope,\r\n                      templateUrl: adfAddTemplatePath,\r\n                      backdrop: 'static'\r\n                  };\r\n\r\n                  $mdDialog.show(opts);\r\n                   \r\n                  addScope.addWidget = function (widget) {\r\n                      var w = {\r\n                          type: widget,\r\n                          config: createConfiguration(widget)\r\n                      };\r\n                      addNewWidgetToModel(model, w, name);\r\n                      // close and destroy\r\n                      addScope.$destroy();\r\n\r\n                      // check for open edit mode immediately\r\n                      if (isEditModeImmediate(widget)) {\r\n                          openEditMode($scope, w);\r\n                      }\r\n                  };\r\n                  addScope.closeDialog = function () {\r\n                      // close and destroy\r\n                      addScope.$destroy();\r\n                  };\r\n              };\r\n\r\n              $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n          }],\r\n          link: function ($scope, $element, $attr) {\r\n              // pass options to scope\r\n              var options = {\r\n                  name: $attr.name,\r\n                  editable: stringToBoolean($attr.editable),\r\n                  enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                  maximizable: stringToBoolean($attr.maximizable),\r\n                  collapsible: stringToBoolean($attr.collapsible),\r\n                  categories: stringToBoolean($attr.categories)\r\n              };\r\n              if (angular.isDefined($attr.editable)) {\r\n                  options.editable = stringToBoolean($attr.editable);\r\n              }\r\n              $scope.options = options;\r\n          },\r\n          templateUrl:(!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard.html'\r\n      };\r\n  }]);\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n\r\n/**\r\n* @ngdoc object\r\n* @name adf.locale#adfLocale\r\n* @description\r\n*\r\n* Holds settings and values for framework supported locales\r\n*/\r\nangular.module('adf.locale')\r\n.constant('adfLocale',\r\n  {\r\n    defaultLocale: 'en-GB',\r\n    frameworkLocales: {\r\n      'en-GB': {\r\n        ADF_COMMON_CLOSE: 'Close',\r\n        ADF_COMMON_DELETE: 'Delete',\r\n        ADF_COMMON_TITLE: 'Title',\r\n        ADF_COMMON_CANCEL: 'Cancel',\r\n        ADF_COMMON_APPLY: 'Apply',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\r\n      },\r\n      'sv-SE': {\r\n        ADF_COMMON_CLOSE: 'Stäng',\r\n        ADF_COMMON_DELETE: 'Ta bort',\r\n        ADF_COMMON_TITLE: 'Titel',\r\n        ADF_COMMON_CANCEL: 'Avbryt',\r\n        ADF_COMMON_APPLY: 'Använd',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\r\n      }\r\n    }\r\n  }\r\n);\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n  .provider('dashboard', [\"adfLocale\", function(adfLocale){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n    var customWidgetTemplatePath = null;\r\n    var customDashboardTemplatePath = null;\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n    var activeLocale = adfLocale.defaultLocale;\r\n    var locales = adfLocale.frameworkLocales;\r\n\r\n    function getLocales() {\r\n      return locales;\r\n    }\r\n\r\n    function getActiveLocale() {\r\n      return activeLocale;\r\n    }\r\n\r\n    function translate(label) {\r\n      var translation = locales[activeLocale][label];\r\n      return translation ? translation : label;\r\n    }\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `category` - `{string=}` - Category of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *      on the scope of the widget.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *        on the scope of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n    this.customDashboardTemplatePath = function (path) {\r\n        customDashboardTemplatePath = path;\r\n        return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#customWidgetTemplatePath\r\n     * @propertyOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the container template for the widgets\r\n     *\r\n     * @param {string} path to the custom widget template\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.customWidgetTemplatePath = function(templatePath) {\r\n      customWidgetTemplatePath = templatePath;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#setLocale\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the locale setting of adf\r\n     *\r\n     * @param {string} ISO Language Code\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n     this.setLocale = function(locale){\r\n       if(locales[locale]) {\r\n         activeLocale = locale;\r\n       } else {\r\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n       }\r\n       return this;\r\n     };\r\n\r\n     /**\r\n      * @ngdoc method\r\n      * @name adf.dashboardProvider#addLocale\r\n      * @methodOf adf.dashboardProvider\r\n      * @description\r\n      *\r\n      * Adds a new locale to adf\r\n      *\r\n      * @param {string} ISO Language Code for the new locale\r\n      * @param {object} translations for the locale.\r\n      *\r\n      * @returns {Object} self\r\n      */\r\n      this.addLocale = function(locale, translations){\r\n        if(!angular.isString(locale)) {\r\n          throw new Error('locale must be an string');\r\n        }\r\n\r\n        if(!angular.isObject(translations)) {\r\n          throw new Error('translations must be an object');\r\n        }\r\n\r\n        locales[locale] = translations;\r\n        return this;\r\n      };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    * @property {method} sets locale of adf.\r\n    * @property {Array.<Object>} hold all of the locale translations.\r\n    * @property {string} the active locale setting.\r\n    * @property {method} translation function passed to templates.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n        setLocale: this.setLocale,\r\n        locales: getLocales,\r\n        activeLocale: getActiveLocale,\r\n        translate: translate,\r\n        customWidgetTemplatePath: customWidgetTemplatePath,\r\n        customDashboardTemplatePath: customDashboardTemplatePath,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  }]);\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", \"dashboard\", function ($compile, adfTemplatePath, columnTemplate, dashboard) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', [\"adfTemplatePath\", function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, widgetService,\r\n          $compile, $controller, $injector, dashboard) {\r\n\r\n    function renderError($element, msg){\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      var newScope = currentScope;\r\n      if (!model){\r\n        renderError($element, 'model is undefined')\r\n      } else if (!content){\r\n        var msg = 'widget content is undefined, please have a look at your browser log';\r\n        renderError($element, msg);\r\n      } else {\r\n        newScope = renderWidget($scope, $element, currentScope, model, content);\r\n      }\r\n      return newScope;\r\n    }\r\n\r\n    function renderWidget($scope, $element, currentScope, model, content) {\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = widgetService.getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // pass resolve map to template scope as defined in resolveAs\r\n        if (content.resolveAs){\r\n          templateScope[content.resolveAs] = locals;\r\n        }\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        renderError($element, msg);\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  }]);\r\n\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$rootScope\", \"dashboard\", \"adfTemplatePath\", function($injector, $q, $log, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n\r\n      //passs translate function from dashboard so we can translate labels inside html templates\r\n      $scope.translate = dashboard.translate;\r\n\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.editTemplateUrl) {\r\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n            if (w.editTemplateUrl) {\r\n              definition.editTemplateUrl = w.editTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            deleteScope.translate = dashboard.translate;\r\n\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              backdrop: 'static'\r\n            };\r\n            //var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              //instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.translate = dashboard.translate;\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          //var instance = $uibModal.open(opts);\r\n\r\n          editScope.closeDialog = function() {\r\n            //instance.close();\r\n            editScope.$destroy();\r\n          };\r\n\r\n          // TODO create util method\r\n          function createApplyPromise(result){\r\n            var promise;\r\n            if (typeof result === 'boolean'){\r\n              var deferred = $q.defer();\r\n              if (result){\r\n                deferred.resolve();\r\n              } else {\r\n                deferred.reject();\r\n              }\r\n              promise = deferred.promise;\r\n            } else {\r\n              promise = $q.when(result);\r\n            }\r\n            return promise;\r\n          }\r\n\r\n          editScope.saveDialog = function() {\r\n            // clear validation error\r\n            editScope.validationError = null;\r\n\r\n            // build injection locals\r\n            var widget = $scope.widget;\r\n\r\n            // create a default apply method for widgets\r\n            // without edit mode\r\n            // see issue https://goo.gl/KHPQLZ\r\n            var applyFn;\r\n            if (widget.edit){\r\n              applyFn = widget.edit.apply;\r\n            } else {\r\n              applyFn = function(){\r\n                return true;\r\n              };\r\n            }\r\n\r\n            // injection locals\r\n            var locals = {\r\n              widget: widget,\r\n              definition: editScope.definition,\r\n              config: editScope.definition.config\r\n            };\r\n\r\n            // invoke apply function and apply if success\r\n            var result = $injector.invoke(applyFn, applyFn, locals);\r\n            createApplyPromise(result).then(function(){\r\n              definition.title = editScope.definition.title;\r\n              angular.extend(definition.config, editScope.definition.config);\r\n              if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                $scope.$broadcast('widgetConfigChanged');\r\n              }\r\n              editScope.closeDialog();\r\n            }, function(err){\r\n              if (err){\r\n                editScope.validationError = err;\r\n              } else {\r\n                editScope.validationError = 'Validation durring apply failed';\r\n              }\r\n            });\r\n          };\r\n\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: [\"$scope\", function($scope) {\r\n\r\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n        });\r\n\r\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n            $scope.edit();\r\n          }\r\n        });\r\n\r\n        $scope.widgetClasses = function(w, definition){\r\n          var classes = definition.styleClass || '';\r\n          // w is undefined, if the type of the widget is unknown\r\n          // see issue #216\r\n          if (!w || !w.frameless || $scope.editMode){\r\n            classes += ' panel panel-default';\r\n          }\r\n          return classes;\r\n        };\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          //var instance = $uibModal.open(opts);\r\n          fullScreenScope.closeDialog = function() {\r\n            //instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      }],\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  }]);\r\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column layout-padding layout=column flex={{column.flex}} ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div>\");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<md-toolbar> <div class=md-toolbar-tools> <h2> <span>Edit Dashboard</span> </h2> <span flex></span> <md-button class=\\\"md-fab md-mini md-primary\\\" ng-click=closeDialog() aria-label=Close> C </md-button> </div> </md-toolbar> <div ng-cloak layout=column> <div layout=column> <md-input-container class=md-block flex> <label>Title</label> <input ng-model=copy.title required> </md-input-container> </div> <div> <label>Structure</label> <div layout=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div ng-repeat=\\\"structureColumn in splitted\\\"> <div ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div layout=row> <div layout=column> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div layout=column ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div layout=row ng-class=row.styleClass ng-style=row.style layout-padding>  </div>\");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1 ng-if=\\\"editMode || editable\\\"> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <md-button ng-if=editMode class=\\\"md-fab md-mini md-primary\\\" ng-click=addWidgetDialog() aria-label=Add> A </md-button> <md-button ng-if=editMode class=\\\"md-fab md-mini md-primary\\\" ng-click=editDashboardDialog() aria-label=Settings> ST </md-button> <md-button ng-if=options.editable class=\\\"md-fab md-mini md-primary\\\" ng-click=toggleEditMode() aria-label=SaveOrEdit> {{editMode ? \\'SA\\' : \\'E\\' }} </md-button> <md-button ng-if=editMode class=\\\"md-fab md-mini md-primary\\\" ng-click=cancelEditMode() aria-label=Undo> U </md-button> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\" <div id=dashboard{{timestamp}} class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<md-toolbar> <div class=md-toolbar-tools> <h2> <span>Add new widget</span> </h2> <span flex></span> <md-button class=\\\"md-fab md-mini md-primary\\\" ng-click=closeDialog() aria-label=Close> C </md-button> </div> </md-toolbar> <div ng-cloak layout=row> <div ng-if=createCategories> <div ng-init=\\\"categorized = createCategories(widgets)\\\"> <div header={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <md-list flex> <md-list-item ng-repeat=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <div flex style=\\\"border: 2px solid; padding: 20px; border-radius: 25px\\\" layout=row ng-click=addWidget(widget.key)> <h3 flex>{{widget.title}}</h3> <p flex>{{widget.description}}</p> </div> </md-list-item> </md-list> </div> </div> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <md-list flex> <md-list-item ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <div flex style=\\\"border: 2px solid; padding: 20px; border-radius: 25px\\\" layout=row ng-click=addWidget(widget.key)> <h3 flex>{{widget.title}}</h3> <p flex>{{widget.description}}</p> </div> </md-list-item> </md-list> </div> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\"> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<md-toolbar> <div class=md-toolbar-tools> <h2> <span>{{definition.title}}</span> </h2> <span flex></span> <md-button class=\\\"md-fab md-mini md-primary\\\" ng-if=widget.reload ng-click=reload() aria-label=Favorite>  R </md-button> <md-button class=\\\"md-fab md-mini md-primary adf-move\\\" ng-if=editMode aria-label=editMode>  M </md-button> <md-button class=md-icon-button ng-click=edit() ng-if=editMode aria-label=edit>  S </md-button> <md-button class=\\\"md-fab md-mini md-primary\\\" ng-click=remove() ng-if=editMode aria-label=remove>  D </md-button> </div> </md-toolbar>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=\\\"widget md-whiteframe-2dp\\\"> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content model=definition content=widget> </adf-widget-content></div> </div> \");}]);\n})(window);","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', function($log, $q, widgetService,\r\n          $compile, $controller, $injector, dashboard) {\r\n\r\n    function renderError($element, msg){\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      var newScope = currentScope;\r\n      if (!model){\r\n        renderError($element, 'model is undefined')\r\n      } else if (!content){\r\n        var msg = 'widget content is undefined, please have a look at your browser log';\r\n        renderError($element, msg);\r\n      } else {\r\n        newScope = renderWidget($scope, $element, currentScope, model, content);\r\n      }\r\n      return newScope;\r\n    }\r\n\r\n    function renderWidget($scope, $element, currentScope, model, content) {\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = widgetService.getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // pass resolve map to template scope as defined in resolveAs\r\n        if (content.resolveAs){\r\n          templateScope[content.resolveAs] = locals;\r\n        }\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        renderError($element, msg);\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', function($injector, $q, $log, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n\r\n      //passs translate function from dashboard so we can translate labels inside html templates\r\n      $scope.translate = dashboard.translate;\r\n\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.editTemplateUrl) {\r\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n            if (w.editTemplateUrl) {\r\n              definition.editTemplateUrl = w.editTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            deleteScope.translate = dashboard.translate;\r\n\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              backdrop: 'static'\r\n            };\r\n            //var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              //instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.translate = dashboard.translate;\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          //var instance = $uibModal.open(opts);\r\n\r\n          editScope.closeDialog = function() {\r\n            //instance.close();\r\n            editScope.$destroy();\r\n          };\r\n\r\n          // TODO create util method\r\n          function createApplyPromise(result){\r\n            var promise;\r\n            if (typeof result === 'boolean'){\r\n              var deferred = $q.defer();\r\n              if (result){\r\n                deferred.resolve();\r\n              } else {\r\n                deferred.reject();\r\n              }\r\n              promise = deferred.promise;\r\n            } else {\r\n              promise = $q.when(result);\r\n            }\r\n            return promise;\r\n          }\r\n\r\n          editScope.saveDialog = function() {\r\n            // clear validation error\r\n            editScope.validationError = null;\r\n\r\n            // build injection locals\r\n            var widget = $scope.widget;\r\n\r\n            // create a default apply method for widgets\r\n            // without edit mode\r\n            // see issue https://goo.gl/KHPQLZ\r\n            var applyFn;\r\n            if (widget.edit){\r\n              applyFn = widget.edit.apply;\r\n            } else {\r\n              applyFn = function(){\r\n                return true;\r\n              };\r\n            }\r\n\r\n            // injection locals\r\n            var locals = {\r\n              widget: widget,\r\n              definition: editScope.definition,\r\n              config: editScope.definition.config\r\n            };\r\n\r\n            // invoke apply function and apply if success\r\n            var result = $injector.invoke(applyFn, applyFn, locals);\r\n            createApplyPromise(result).then(function(){\r\n              definition.title = editScope.definition.title;\r\n              angular.extend(definition.config, editScope.definition.config);\r\n              if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                $scope.$broadcast('widgetConfigChanged');\r\n              }\r\n              editScope.closeDialog();\r\n            }, function(err){\r\n              if (err){\r\n                editScope.validationError = err;\r\n              } else {\r\n                editScope.validationError = 'Validation durring apply failed';\r\n              }\r\n            });\r\n          };\r\n\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: function($scope) {\r\n\r\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n        });\r\n\r\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n            $scope.edit();\r\n          }\r\n        });\r\n\r\n        $scope.widgetClasses = function(w, definition){\r\n          var classes = definition.styleClass || '';\r\n          // w is undefined, if the type of the widget is unknown\r\n          // see issue #216\r\n          if (!w || !w.frameless || $scope.editMode){\r\n            classes += ' panel panel-default';\r\n          }\r\n          return classes;\r\n        };\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          //var instance = $uibModal.open(opts);\r\n          fullScreenScope.closeDialog = function() {\r\n            //instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      },\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n",null,"(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '0.13.0-SNAPSHOT');\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf.locale', [])\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, dashboard, adfTemplatePath, $mdDialog) {\r\n\r\n      \r\n\r\n      function stringToBoolean(string) {\r\n          switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n              case 'true': case 'yes': case '1': return true;\r\n              case 'false': case 'no': case '0': case null: return false;\r\n              default: return Boolean(string);\r\n          }\r\n      }\r\n\r\n      function copyWidgets(source, target) {\r\n          if (source.widgets && source.widgets.length > 0) {\r\n              var w = source.widgets.shift();\r\n              while (w) {\r\n                  target.widgets.push(w);\r\n                  w = source.widgets.shift();\r\n              }\r\n          }\r\n      }\r\n\r\n      /**\r\n      * Copy widget from old columns to the new model\r\n      * @param object root the model\r\n      * @param array of columns\r\n      * @param counter\r\n      */\r\n      function fillStructure(root, columns, counter) {\r\n          counter = counter || 0;\r\n\r\n          if (angular.isDefined(root.rows)) {\r\n              angular.forEach(root.rows, function (row) {\r\n                  angular.forEach(row.columns, function (column) {\r\n                      // if the widgets prop doesn't exist, create a new array for it.\r\n                      // this allows ui.sortable to do it's thing without error\r\n                      if (!column.widgets) {\r\n                          column.widgets = [];\r\n                      }\r\n\r\n                      // if a column exist at the counter index, copy over the column\r\n                      if (angular.isDefined(columns[counter])) {\r\n                          // do not add widgets to a column, which uses nested rows\r\n                          if (angular.isUndefined(column.rows)) {\r\n                              copyWidgets(columns[counter], column);\r\n                              counter++;\r\n                          }\r\n                      }\r\n\r\n                      // run fillStructure again for any sub rows/columns\r\n                      counter = fillStructure(column, columns, counter);\r\n                  });\r\n              });\r\n          }\r\n          return counter;\r\n      }\r\n\r\n      /**\r\n      * Read Columns: recursively searches an object for the 'columns' property\r\n      * @param object model\r\n      * @param array  an array of existing columns; used when recursion happens\r\n      */\r\n      function readColumns(root, columns) {\r\n          columns = columns || [];\r\n\r\n          if (angular.isDefined(root.rows)) {\r\n              angular.forEach(root.rows, function (row) {\r\n                  angular.forEach(row.columns, function (col) {\r\n                      columns.push(col);\r\n                      // keep reading columns until we can't any more\r\n                      readColumns(col, columns);\r\n                  });\r\n              });\r\n          }\r\n\r\n          return columns;\r\n      }\r\n\r\n      function changeStructure(model, structure) {\r\n          var columns = readColumns(model);\r\n          var counter = 0;\r\n\r\n          model.rows = angular.copy(structure.rows);\r\n\r\n          while (counter < columns.length) {\r\n              counter = fillStructure(model, columns, counter);\r\n          }\r\n      }\r\n\r\n      function createConfiguration(type) {\r\n          var cfg = {};\r\n          var config = dashboard.widgets[type].config;\r\n          if (config) {\r\n              cfg = angular.copy(config);\r\n          }\r\n          return cfg;\r\n      }\r\n\r\n      /**\r\n       * Find first widget column in model.\r\n       *\r\n       * @param dashboard model\r\n       */\r\n      function findFirstWidgetColumn(model) {\r\n          var column = null;\r\n          if (!angular.isArray(model.rows)) {\r\n              $log.error('model does not have any rows');\r\n              return null;\r\n          }\r\n          for (var i = 0; i < model.rows.length; i++) {\r\n              var row = model.rows[i];\r\n              if (angular.isArray(row.columns)) {\r\n                  for (var j = 0; j < row.columns.length; j++) {\r\n                      var col = row.columns[j];\r\n                      if (!col.rows) {\r\n                          column = col;\r\n                          break;\r\n                      }\r\n                  }\r\n              }\r\n              if (column) {\r\n                  break;\r\n              }\r\n          }\r\n          return column;\r\n      }\r\n\r\n      /**\r\n       * Adds the widget to first column of the model.\r\n       *\r\n       * @param dashboard model\r\n       * @param widget to add to model\r\n       * @param name name of the dashboard\r\n       */\r\n      function addNewWidgetToModel(model, widget, name) {\r\n          if (model) {\r\n              var column = findFirstWidgetColumn(model);\r\n              if (column) {\r\n                  if (!column.widgets) {\r\n                      column.widgets = [];\r\n                  }\r\n                  column.widgets.unshift(widget);\r\n\r\n                  // broadcast added event\r\n                  $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n              } else {\r\n                  $log.error('could not find first widget column');\r\n              }\r\n          } else {\r\n              $log.error('model is undefined');\r\n          }\r\n      }\r\n\r\n      /**\r\n       * Checks if the edit mode of the widget should be opened immediately.\r\n       *\r\n       * @param widget type\r\n       */\r\n      function isEditModeImmediate(type) {\r\n          var widget = dashboard.widgets[type];\r\n          return widget && widget.edit && widget.edit.immediate;\r\n      }\r\n\r\n      /**\r\n       * Opens the edit mode of the specified widget.\r\n       *\r\n       * @param dashboard scope\r\n       * @param widget\r\n       */\r\n      function openEditMode($scope, widget) {\r\n          // wait some time before fire enter edit mode event\r\n          $timeout(function () {\r\n              $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n          }, 200);\r\n      }\r\n\r\n      /**\r\n       * Splits an object into an array multiple objects inside.\r\n       *\r\n       * @param object source object\r\n       * @param size size of array\r\n       *\r\n       * @return array of splitted objects\r\n       */\r\n      function split(object, size) {\r\n          var arr = [];\r\n          var i = 0;\r\n          angular.forEach(object, function (value, key) {\r\n              var index = i++ % size;\r\n              if (!arr[index]) {\r\n                  arr[index] = {};\r\n              }\r\n              arr[index][key] = value;\r\n          });\r\n          return arr;\r\n      }\r\n\r\n      /**\r\n       * Creates object with the category name as key and an array of widgets as value.\r\n       *\r\n       * @param widgets array of widgets\r\n       *\r\n       * @return array of categories\r\n       */\r\n      function createCategories(widgets) {\r\n          var categories = {};\r\n          angular.forEach(widgets, function (widget, key) {\r\n              var category = widget.category;\r\n              // if the widget has no category use a default one\r\n              if (!category) {\r\n                  category = 'Miscellaneous';\r\n              }\r\n              // push widget to category array\r\n              if (angular.isUndefined(categories[category])) {\r\n                  categories[category] = { widgets: {} };\r\n              }\r\n              categories[category].widgets[key] = widget;\r\n          });\r\n          return categories;\r\n      }\r\n\r\n      return {\r\n          replace: true,\r\n          restrict: 'EA',\r\n          transclude: false,\r\n          scope: {\r\n              structure: '@',\r\n              name: '@',\r\n              collapsible: '@',\r\n              editable: '@',\r\n              editMode: '@',\r\n              continuousEditMode: '=',\r\n              maximizable: '@',\r\n              adfModel: '=',\r\n              adfWidgetFilter: '=',\r\n              categories: '@'\r\n              \r\n          },\r\n          controller: function ($scope) {\r\n              var model = {};\r\n              var structure = {};\r\n              var widgetFilter = null;\r\n              var structureName = {};\r\n              var name = $scope.name;\r\n\r\n              // Watching for changes on adfModel\r\n              $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                  // has model changed or is the model attribute not set\r\n                  if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                      model = $scope.adfModel;\r\n                      widgetFilter = $scope.adfWidgetFilter;\r\n                      if (!model || !model.rows) {\r\n                          structureName = $scope.structure;\r\n                          structure = dashboard.structures[structureName];\r\n                          if (structure) {\r\n                              if (model) {\r\n                                  model.rows = angular.copy(structure).rows;\r\n                              } else {\r\n                                  model = angular.copy(structure);\r\n                              }\r\n                              model.structure = structureName;\r\n                          } else {\r\n                              $log.error('could not find structure ' + structureName);\r\n                          }\r\n                      }\r\n\r\n                      if (model) {\r\n                          if (!model.title) {\r\n                              model.title = 'Dashboard';\r\n                          }\r\n                          if (!model.titleTemplateUrl) {\r\n                              model.titleTemplateUrl = (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-title.html';\r\n                          }\r\n                          $scope.model = model;\r\n                      } else {\r\n                          $log.error('could not find or create model');\r\n                      }\r\n                  }\r\n              }, true);\r\n\r\n              // edit mode\r\n              $scope.editMode = false;\r\n              $scope.editClass = '';\r\n\r\n              // edit available\r\n              $scope.editable = false;\r\n\r\n              // use to build an unique id for each dashboard\r\n              $scope.timestamp = Date.now();\r\n\r\n              //passs translate function from dashboard so we can translate labels inside html templates\r\n              $scope.translate = dashboard.translate;\r\n\r\n              function getNewModalScope() {\r\n                  var scope = $scope.$new();\r\n                  //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                  scope.translate = dashboard.translate;\r\n                  return scope;\r\n              }\r\n\r\n              $scope.toggleEditMode = function () {\r\n                  $scope.editMode = !$scope.editMode;\r\n                  if ($scope.editMode) {\r\n                      if (!$scope.continuousEditMode) {\r\n                          $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                          $rootScope.$broadcast('adfIsEditMode');\r\n                      }\r\n                  }\r\n\r\n                  if (!$scope.editMode) {\r\n                      $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                  }\r\n              };\r\n\r\n              $scope.$on('adfToggleEditMode', function () {\r\n                  $scope.toggleEditMode();\r\n              });\r\n\r\n              $scope.collapseAll = function (collapseExpandStatus) {\r\n                  $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\r\n              };\r\n\r\n              $scope.cancelEditMode = function () {\r\n                  $scope.editMode = false;\r\n                  if (!$scope.continuousEditMode) {\r\n                      $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                  }\r\n                  $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n              };\r\n\r\n              // edit dashboard settings\r\n              $scope.editDashboardDialog = function () {\r\n                  var editDashboardScope = getNewModalScope();\r\n                  // create a copy of the title, to avoid changing the title to\r\n                  // \"dashboard\" if the field is empty\r\n                  editDashboardScope.copy = {\r\n                      title: model.title\r\n                  };\r\n\r\n                  // pass dashboard structure to scope\r\n                  editDashboardScope.structures = dashboard.structures;\r\n\r\n                  // pass split function to scope, to be able to display structures in multiple columns\r\n                  editDashboardScope.split = split;\r\n\r\n                  var adfEditTemplatePath = (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-edit.html';\r\n                  if (model.editTemplateUrl) {\r\n                      adfEditTemplatePath = model.editTemplateUrl;\r\n                  }\r\n                  var instance = $mdDialog.show({\r\n                    scope: editDashboardScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                  });\r\n                  editDashboardScope.changeStructure = function (name, structure) {\r\n                      $log.info('change structure to ' + name);\r\n                      changeStructure(model, structure);\r\n                      if (model.structure !== name) {\r\n                          model.structure = name;\r\n                      }\r\n                  };\r\n                  editDashboardScope.closeDialog = function () {\r\n                      // copy the new title back to the model\r\n                      model.title = editDashboardScope.copy.title;\r\n                      // close modal and destroy the scope\r\n                      editDashboardScope.$destroy();\r\n                  };\r\n              };\r\n\r\n              // add widget dialog\r\n              $scope.addWidgetDialog = function () {\r\n                  var addScope = getNewModalScope();\r\n                  var model = $scope.model;\r\n                  var widgets;\r\n                  if (angular.isFunction(widgetFilter)) {\r\n                      widgets = {};\r\n                      angular.forEach(dashboard.widgets, function (widget, type) {\r\n                          if (widgetFilter(widget, type, model)) {\r\n                              widgets[type] = widget;\r\n                          }\r\n                      });\r\n                  } else {\r\n                      widgets = dashboard.widgets;\r\n                  }\r\n                  addScope.widgets = widgets;\r\n\r\n                  //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                  addScope.translate = $scope.translate;\r\n\r\n                  // pass createCategories function to scope, if categories option is enabled\r\n                  if ($scope.options.categories) {\r\n                      $scope.createCategories = createCategories;\r\n                  }\r\n\r\n                  var adfAddTemplatePath = (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'widget-add.html';\r\n                  if (model.addTemplateUrl) {\r\n                      adfAddTemplatePath = model.addTemplateUrl;\r\n                  }\r\n\r\n                  var opts = {\r\n                      scope: addScope,\r\n                      templateUrl: adfAddTemplatePath,\r\n                      backdrop: 'static'\r\n                  };\r\n\r\n                  $mdDialog.show(opts);\r\n                   \r\n                  addScope.addWidget = function (widget) {\r\n                      var w = {\r\n                          type: widget,\r\n                          config: createConfiguration(widget)\r\n                      };\r\n                      addNewWidgetToModel(model, w, name);\r\n                      // close and destroy\r\n                      addScope.$destroy();\r\n\r\n                      // check for open edit mode immediately\r\n                      if (isEditModeImmediate(widget)) {\r\n                          openEditMode($scope, w);\r\n                      }\r\n                  };\r\n                  addScope.closeDialog = function () {\r\n                      // close and destroy\r\n                      addScope.$destroy();\r\n                  };\r\n              };\r\n\r\n              $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n          },\r\n          link: function ($scope, $element, $attr) {\r\n              // pass options to scope\r\n              var options = {\r\n                  name: $attr.name,\r\n                  editable: stringToBoolean($attr.editable),\r\n                  enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                  maximizable: stringToBoolean($attr.maximizable),\r\n                  collapsible: stringToBoolean($attr.collapsible),\r\n                  categories: stringToBoolean($attr.categories)\r\n              };\r\n              if (angular.isDefined($attr.editable)) {\r\n                  options.editable = stringToBoolean($attr.editable);\r\n              }\r\n              $scope.options = options;\r\n          },\r\n          templateUrl:(!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard.html'\r\n      };\r\n  });\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n\r\n/**\r\n* @ngdoc object\r\n* @name adf.locale#adfLocale\r\n* @description\r\n*\r\n* Holds settings and values for framework supported locales\r\n*/\r\nangular.module('adf.locale')\r\n.constant('adfLocale',\r\n  {\r\n    defaultLocale: 'en-GB',\r\n    frameworkLocales: {\r\n      'en-GB': {\r\n        ADF_COMMON_CLOSE: 'Close',\r\n        ADF_COMMON_DELETE: 'Delete',\r\n        ADF_COMMON_TITLE: 'Title',\r\n        ADF_COMMON_CANCEL: 'Cancel',\r\n        ADF_COMMON_APPLY: 'Apply',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\r\n      },\r\n      'sv-SE': {\r\n        ADF_COMMON_CLOSE: 'Stäng',\r\n        ADF_COMMON_DELETE: 'Ta bort',\r\n        ADF_COMMON_TITLE: 'Titel',\r\n        ADF_COMMON_CANCEL: 'Avbryt',\r\n        ADF_COMMON_APPLY: 'Använd',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\r\n      }\r\n    }\r\n  }\r\n);\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n  .provider('dashboard', function(adfLocale){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n    var customWidgetTemplatePath = null;\r\n    var customDashboardTemplatePath = null;\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n    var activeLocale = adfLocale.defaultLocale;\r\n    var locales = adfLocale.frameworkLocales;\r\n\r\n    function getLocales() {\r\n      return locales;\r\n    }\r\n\r\n    function getActiveLocale() {\r\n      return activeLocale;\r\n    }\r\n\r\n    function translate(label) {\r\n      var translation = locales[activeLocale][label];\r\n      return translation ? translation : label;\r\n    }\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `category` - `{string=}` - Category of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *      on the scope of the widget.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *        on the scope of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n    this.customDashboardTemplatePath = function (path) {\r\n        customDashboardTemplatePath = path;\r\n        return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#customWidgetTemplatePath\r\n     * @propertyOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the container template for the widgets\r\n     *\r\n     * @param {string} path to the custom widget template\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.customWidgetTemplatePath = function(templatePath) {\r\n      customWidgetTemplatePath = templatePath;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#setLocale\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the locale setting of adf\r\n     *\r\n     * @param {string} ISO Language Code\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n     this.setLocale = function(locale){\r\n       if(locales[locale]) {\r\n         activeLocale = locale;\r\n       } else {\r\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n       }\r\n       return this;\r\n     };\r\n\r\n     /**\r\n      * @ngdoc method\r\n      * @name adf.dashboardProvider#addLocale\r\n      * @methodOf adf.dashboardProvider\r\n      * @description\r\n      *\r\n      * Adds a new locale to adf\r\n      *\r\n      * @param {string} ISO Language Code for the new locale\r\n      * @param {object} translations for the locale.\r\n      *\r\n      * @returns {Object} self\r\n      */\r\n      this.addLocale = function(locale, translations){\r\n        if(!angular.isString(locale)) {\r\n          throw new Error('locale must be an string');\r\n        }\r\n\r\n        if(!angular.isObject(translations)) {\r\n          throw new Error('translations must be an object');\r\n        }\r\n\r\n        locales[locale] = translations;\r\n        return this;\r\n      };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    * @property {method} sets locale of adf.\r\n    * @property {Array.<Object>} hold all of the locale translations.\r\n    * @property {string} the active locale setting.\r\n    * @property {method} translation function passed to templates.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n        setLocale: this.setLocale,\r\n        locales: getLocales,\r\n        activeLocale: getActiveLocale,\r\n        translate: translate,\r\n        customWidgetTemplatePath: customWidgetTemplatePath,\r\n        customDashboardTemplatePath: customDashboardTemplatePath,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate, dashboard) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: (!dashboard.customDashboardTemplatePath ? adfTemplatePath : dashboard.customDashboardTemplatePath) + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', function($log, $q, widgetService,\r\n          $compile, $controller, $injector, dashboard) {\r\n\r\n    function renderError($element, msg){\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      var newScope = currentScope;\r\n      if (!model){\r\n        renderError($element, 'model is undefined')\r\n      } else if (!content){\r\n        var msg = 'widget content is undefined, please have a look at your browser log';\r\n        renderError($element, msg);\r\n      } else {\r\n        newScope = renderWidget($scope, $element, currentScope, model, content);\r\n      }\r\n      return newScope;\r\n    }\r\n\r\n    function renderWidget($scope, $element, currentScope, model, content) {\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = widgetService.getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // pass resolve map to template scope as defined in resolveAs\r\n        if (content.resolveAs){\r\n          templateScope[content.resolveAs] = locals;\r\n        }\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        renderError($element, msg);\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', function($injector, $q, $log, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n\r\n      //passs translate function from dashboard so we can translate labels inside html templates\r\n      $scope.translate = dashboard.translate;\r\n\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.editTemplateUrl) {\r\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n            if (w.editTemplateUrl) {\r\n              definition.editTemplateUrl = w.editTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            deleteScope.translate = dashboard.translate;\r\n\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              backdrop: 'static'\r\n            };\r\n            //var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              //instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.translate = dashboard.translate;\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          //var instance = $uibModal.open(opts);\r\n\r\n          editScope.closeDialog = function() {\r\n            //instance.close();\r\n            editScope.$destroy();\r\n          };\r\n\r\n          // TODO create util method\r\n          function createApplyPromise(result){\r\n            var promise;\r\n            if (typeof result === 'boolean'){\r\n              var deferred = $q.defer();\r\n              if (result){\r\n                deferred.resolve();\r\n              } else {\r\n                deferred.reject();\r\n              }\r\n              promise = deferred.promise;\r\n            } else {\r\n              promise = $q.when(result);\r\n            }\r\n            return promise;\r\n          }\r\n\r\n          editScope.saveDialog = function() {\r\n            // clear validation error\r\n            editScope.validationError = null;\r\n\r\n            // build injection locals\r\n            var widget = $scope.widget;\r\n\r\n            // create a default apply method for widgets\r\n            // without edit mode\r\n            // see issue https://goo.gl/KHPQLZ\r\n            var applyFn;\r\n            if (widget.edit){\r\n              applyFn = widget.edit.apply;\r\n            } else {\r\n              applyFn = function(){\r\n                return true;\r\n              };\r\n            }\r\n\r\n            // injection locals\r\n            var locals = {\r\n              widget: widget,\r\n              definition: editScope.definition,\r\n              config: editScope.definition.config\r\n            };\r\n\r\n            // invoke apply function and apply if success\r\n            var result = $injector.invoke(applyFn, applyFn, locals);\r\n            createApplyPromise(result).then(function(){\r\n              definition.title = editScope.definition.title;\r\n              angular.extend(definition.config, editScope.definition.config);\r\n              if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                $scope.$broadcast('widgetConfigChanged');\r\n              }\r\n              editScope.closeDialog();\r\n            }, function(err){\r\n              if (err){\r\n                editScope.validationError = err;\r\n              } else {\r\n                editScope.validationError = 'Validation durring apply failed';\r\n              }\r\n            });\r\n          };\r\n\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: function($scope) {\r\n\r\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n        });\r\n\r\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n            $scope.edit();\r\n          }\r\n        });\r\n\r\n        $scope.widgetClasses = function(w, definition){\r\n          var classes = definition.styleClass || '';\r\n          // w is undefined, if the type of the widget is unknown\r\n          // see issue #216\r\n          if (!w || !w.frameless || $scope.editMode){\r\n            classes += ' panel panel-default';\r\n          }\r\n          return classes;\r\n        };\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          //var instance = $uibModal.open(opts);\r\n          fullScreenScope.closeDialog = function() {\r\n            //instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      },\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column layout-padding layout=column flex={{column.flex}} ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div>\");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<md-toolbar> <div class=md-toolbar-tools> <h2> <span>Edit Dashboard</span> </h2> <span flex></span> <md-button class=\\\"md-fab md-mini md-primary\\\" ng-click=closeDialog() aria-label=Close> C </md-button> </div> </md-toolbar> <div ng-cloak layout=column> <div layout=column> <md-input-container class=md-block flex> <label>Title</label> <input ng-model=copy.title required> </md-input-container> </div> <div> <label>Structure</label> <div layout=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div ng-repeat=\\\"structureColumn in splitted\\\"> <div ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div layout=row> <div layout=column> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div layout=column ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div layout=row ng-class=row.styleClass ng-style=row.style layout-padding>  </div>\");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1 ng-if=\\\"editMode || editable\\\"> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <md-button ng-if=editMode class=\\\"md-fab md-mini md-primary\\\" ng-click=addWidgetDialog() aria-label=Add> A </md-button> <md-button ng-if=editMode class=\\\"md-fab md-mini md-primary\\\" ng-click=editDashboardDialog() aria-label=Settings> ST </md-button> <md-button ng-if=options.editable class=\\\"md-fab md-mini md-primary\\\" ng-click=toggleEditMode() aria-label=SaveOrEdit> {{editMode ? \\'SA\\' : \\'E\\' }} </md-button> <md-button ng-if=editMode class=\\\"md-fab md-mini md-primary\\\" ng-click=cancelEditMode() aria-label=Undo> U </md-button> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\" <div id=dashboard{{timestamp}} class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<md-toolbar> <div class=md-toolbar-tools> <h2> <span>Add new widget</span> </h2> <span flex></span> <md-button class=\\\"md-fab md-mini md-primary\\\" ng-click=closeDialog() aria-label=Close> C </md-button> </div> </md-toolbar> <div ng-cloak layout=row> <div ng-if=createCategories> <div ng-init=\\\"categorized = createCategories(widgets)\\\"> <div header={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <md-list flex> <md-list-item ng-repeat=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <div flex style=\\\"border: 2px solid; padding: 20px; border-radius: 25px\\\" layout=row ng-click=addWidget(widget.key)> <h3 flex>{{widget.title}}</h3> <p flex>{{widget.description}}</p> </div> </md-list-item> </md-list> </div> </div> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <md-list flex> <md-list-item ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <div flex style=\\\"border: 2px solid; padding: 20px; border-radius: 25px\\\" layout=row ng-click=addWidget(widget.key)> <h3 flex>{{widget.title}}</h3> <p flex>{{widget.description}}</p> </div> </md-list-item> </md-list> </div> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\"> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<md-toolbar> <div class=md-toolbar-tools> <h2> <span>{{definition.title}}</span> </h2> <span flex></span> <md-button class=\\\"md-fab md-mini md-primary\\\" ng-if=widget.reload ng-click=reload() aria-label=Favorite>  R </md-button> <md-button class=\\\"md-fab md-mini md-primary adf-move\\\" ng-if=editMode aria-label=editMode>  M </md-button> <md-button class=md-icon-button ng-click=edit() ng-if=editMode aria-label=edit>  S </md-button> <md-button class=\\\"md-fab md-mini md-primary\\\" ng-click=remove() ng-if=editMode aria-label=remove>  D </md-button> </div> </md-toolbar>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=\\\"widget md-whiteframe-2dp\\\"> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content model=definition content=widget> </adf-widget-content></div> </div> \");}]);\n})(window);"],"sourceRoot":"/source/"}